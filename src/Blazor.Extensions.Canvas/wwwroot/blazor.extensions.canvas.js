!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1);var o;!function(t){const e={Canvas2d:new n.ContextManager("2d"),WebGL:new n.ContextManager("webgl")};t.initialize=function(){"undefined"==typeof window||window.BlazorExtensions?window.BlazorExtensions=Object.assign({},window.BlazorExtensions,e):window.BlazorExtensions=Object.assign({},e)}}(o||(o={})),o.initialize()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);e.ContextManager=class{constructor(t){if(this.contexts=new Map,this.imageCache=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.patterns=new Map,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation],this.reportImageLoaded=t=>{console.log("in callImageLoaded guid=",t),DotNet.invokeMethodAsync("Blazor.Extensions.Canvas","ImageLoaded",t)},this.add=(t,e)=>{if(!t)throw new Error("Invalid canvas.");if(!this.contexts.get(t.id)){var r;if(!(r=e?t.getContext(this.contextName,e):t.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(t.id,r)}},this.remove=t=>{this.contexts.delete(t.id)},this.setProperty=(t,e,r)=>{const n=this.getContext(t);this.setPropertyWithContext(n,e,r)},this.getProperty=(t,e)=>{const r=this.getContext(t);return this.serialize(r[e])},this.call=(t,e,r)=>{const n=this.getContext(t);return this.callWithContext(n,e,r)},this.callBatch=(t,e)=>{const r=this.getContext(t);for(let t=0;t<e.length;t++){let n=e[t].slice(2);e[t][1]?this.callWithContext(r,e[t][0],n):this.setPropertyWithContext(r,e[t][0],Array.isArray(n)&&n.length>0?n[0]:null)}},this.drawImagePath2D=(t,e)=>{if(!t)throw new Error("Invalid canvas in drawImagePath2D.");const r=this.contexts.get(t.id);if(!r)throw new Error("Invalid context in drawImagePath2D.");const n=new Path2D(e[0]);return r.setTransform(e[1],e[2],e[3],e[4],e[5],e[6]),r.fill(n),!0},this.drawImageDefaultPath2D=(t,e)=>{if(!t)throw new Error("Invalid canvas in drawImagePath2D.");const r=this.contexts.get(t.id);if(!r)throw new Error("Invalid context in drawImagePath2D.");const n=new Path2D(e);return r.fill(n),!0},this.loadImageBase64=(t,[e,r])=>{if(this.imageCache.get(e))return this.reportImageLoaded(e),!0;const n=new Image;n.id=e;const o=this;return this.imageCache.set(e,n),n.onload=function(){console.log("initial image loaded"),o.reportImageLoaded(e)},n.src=r,!0},this.isDrawn=!1,this.drawImageBase64=(t,[e,r,n,o,i])=>{if(console.log("drawImageBase64 guid=",e,r,n,o,i),!t)return;const a=this.contexts.get(t.id);if(!a)throw new Error("Invalid context in drawImageBase64.");const s=this.imageCache.get(e);return void 0!==s&&console.log("drawImageBase64 img=",s.id),Boolean(s)?(this.isDrawn||a.drawImage(s,r,n,o,i),this.isDrawn=!0):console.log("drawImageBase64 No image found for guid=",e),!0},this.customRoundedRect=(t,e)=>{if(!t)throw new Error("Invalid canvas in customRoundedRect.");const r=this.contexts.get(t.id);if(!r)throw new Error("Invalid context in customRoundedRect.");const n=e[0],o=e[1],i=e[2],a=e[3],s=e[4];return r.beginPath(),r.moveTo(n+s,o),r.lineTo(n+i-s,o),r.quadraticCurveTo(n+i,o,n+i,o+s),r.lineTo(n+i,o+a-s),r.quadraticCurveTo(n+i,o+a,n+i-s,o+a),r.lineTo(n+s,o+a),r.quadraticCurveTo(n,o+a,n,o+a-s),r.lineTo(n,o+s),r.quadraticCurveTo(n,o,n+s,o),r.closePath(),!0},this.callWithContext=(t,e,r)=>{const o=this.prototypes[e].apply(t,null!=r?r.map(t=>this.deserialize(e,t)):[]);if("createPattern"==e){const t=n.v4();return this.patterns.set(t,o),t}return this.serialize(o)},this.setPropertyWithContext=(t,e,r)=>{"fillStyle"==e&&(r=this.patterns.get(r)||r),t[e]=this.deserialize(e,r)},this.getContext=t=>{if(!t)throw new Error("Invalid canvas.");const e=this.contexts.get(t.id);if(!e)throw new Error("Invalid context.");return e},this.deserialize=(t,e)=>{if(!this.webGLContext||null==e)return e;if(e.hasOwnProperty("webGLType")&&e.hasOwnProperty("id"))return this.webGLObject[e.id];if(Array.isArray(e)&&!t.endsWith("v"))return Int8Array.of(...e);if("string"!=typeof e||"bufferData"!==t&&"bufferSubData"!==t)return e;{let t=window.atob(e),n=t.length,o=new Uint8Array(n);for(var r=0;r<n;r++)o[r]=t.charCodeAt(r);return o}},this.serialize=t=>{if(t instanceof TextMetrics)return{width:t.width};if(!this.webGLContext||null==t)return t;const e=this.webGLTypes.find(e=>t instanceof e);if(null!=e){const r=this.webGLObject.length;return this.webGLObject.push(t),{webGLType:e.name,id:r}}return t},this.contextName=t,"2d"===t)this.prototypes=CanvasRenderingContext2D.prototype;else{if("webgl"!==t&&"experimental-webgl"!==t)throw new Error("Invalid context name: "+t);this.prototypes=WebGLRenderingContext.prototype,this.webGLContext=!0}}}},function(t,e,r){"use strict";r.r(e),r.d(e,"v1",(function(){return v})),r.d(e,"v3",(function(){return A})),r.d(e,"v4",(function(){return P})),r.d(e,"v5",(function(){return D})),r.d(e,"NIL",(function(){return G})),r.d(e,"version",(function(){return M})),r.d(e,"validate",(function(){return s})),r.d(e,"stringify",(function(){return f})),r.d(e,"parse",(function(){return p}));var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),o=new Uint8Array(16);function i(){if(!n)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}var a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var s=function(t){return"string"==typeof t&&a.test(t)},u=[],c=0;c<256;++c)u.push((c+256).toString(16).substr(1));var l,d,f=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(u[t[e+0]]+u[t[e+1]]+u[t[e+2]]+u[t[e+3]]+"-"+u[t[e+4]]+u[t[e+5]]+"-"+u[t[e+6]]+u[t[e+7]]+"-"+u[t[e+8]]+u[t[e+9]]+"-"+u[t[e+10]]+u[t[e+11]]+u[t[e+12]]+u[t[e+13]]+u[t[e+14]]+u[t[e+15]]).toLowerCase();if(!s(r))throw TypeError("Stringified UUID is invalid");return r},h=0,g=0;var v=function(t,e,r){var n=e&&r||0,o=e||new Array(16),a=(t=t||{}).node||l,s=void 0!==t.clockseq?t.clockseq:d;if(null==a||null==s){var u=t.random||(t.rng||i)();null==a&&(a=l=[1|u[0],u[1],u[2],u[3],u[4],u[5]]),null==s&&(s=d=16383&(u[6]<<8|u[7]))}var c=void 0!==t.msecs?t.msecs:Date.now(),v=void 0!==t.nsecs?t.nsecs:g+1,p=c-h+(v-g)/1e4;if(p<0&&void 0===t.clockseq&&(s=s+1&16383),(p<0||c>h)&&void 0===t.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");h=c,g=v,d=s;var w=(1e4*(268435455&(c+=122192928e5))+v)%4294967296;o[n++]=w>>>24&255,o[n++]=w>>>16&255,o[n++]=w>>>8&255,o[n++]=255&w;var y=c/4294967296*1e4&268435455;o[n++]=y>>>8&255,o[n++]=255&y,o[n++]=y>>>24&15|16,o[n++]=y>>>16&255,o[n++]=s>>>8|128,o[n++]=255&s;for(var m=0;m<6;++m)o[n+m]=a[m];return e||f(o)};var p=function(t){if(!s(t))throw TypeError("Invalid UUID");var e,r=new Uint8Array(16);return r[0]=(e=parseInt(t.slice(0,8),16))>>>24,r[1]=e>>>16&255,r[2]=e>>>8&255,r[3]=255&e,r[4]=(e=parseInt(t.slice(9,13),16))>>>8,r[5]=255&e,r[6]=(e=parseInt(t.slice(14,18),16))>>>8,r[7]=255&e,r[8]=(e=parseInt(t.slice(19,23),16))>>>8,r[9]=255&e,r[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,r[11]=e/4294967296&255,r[12]=e>>>24&255,r[13]=e>>>16&255,r[14]=e>>>8&255,r[15]=255&e,r};var w=function(t,e,r){function n(t,n,o,i){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));for(var e=[],r=0;r<t.length;++r)e.push(t.charCodeAt(r));return e}(t)),"string"==typeof n&&(n=p(n)),16!==n.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+t.length);if(a.set(n),a.set(t,n.length),(a=r(a))[6]=15&a[6]|e,a[8]=63&a[8]|128,o){i=i||0;for(var s=0;s<16;++s)o[i+s]=a[s];return o}return f(a)}try{n.name=t}catch(t){}return n.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",n.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",n};function y(t){return 14+(t+64>>>9<<4)+1}function m(t,e){var r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}function b(t,e,r,n,o,i){return m((a=m(m(e,t),m(n,i)))<<(s=o)|a>>>32-s,r);var a,s}function x(t,e,r,n,o,i,a){return b(e&r|~e&n,t,e,o,i,a)}function I(t,e,r,n,o,i,a){return b(e&n|r&~n,t,e,o,i,a)}function C(t,e,r,n,o,i,a){return b(e^r^n,t,e,o,i,a)}function L(t,e,r,n,o,i,a){return b(r^(e|~n),t,e,o,i,a)}var A=w("v3",48,(function(t){if("string"==typeof t){var e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(var r=0;r<e.length;++r)t[r]=e.charCodeAt(r)}return function(t){for(var e=[],r=32*t.length,n=0;n<r;n+=8){var o=t[n>>5]>>>n%32&255,i=parseInt("0123456789abcdef".charAt(o>>>4&15)+"0123456789abcdef".charAt(15&o),16);e.push(i)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[y(e)-1]=e;for(var r=1732584193,n=-271733879,o=-1732584194,i=271733878,a=0;a<t.length;a+=16){var s=r,u=n,c=o,l=i;r=x(r,n,o,i,t[a],7,-680876936),i=x(i,r,n,o,t[a+1],12,-389564586),o=x(o,i,r,n,t[a+2],17,606105819),n=x(n,o,i,r,t[a+3],22,-1044525330),r=x(r,n,o,i,t[a+4],7,-176418897),i=x(i,r,n,o,t[a+5],12,1200080426),o=x(o,i,r,n,t[a+6],17,-1473231341),n=x(n,o,i,r,t[a+7],22,-45705983),r=x(r,n,o,i,t[a+8],7,1770035416),i=x(i,r,n,o,t[a+9],12,-1958414417),o=x(o,i,r,n,t[a+10],17,-42063),n=x(n,o,i,r,t[a+11],22,-1990404162),r=x(r,n,o,i,t[a+12],7,1804603682),i=x(i,r,n,o,t[a+13],12,-40341101),o=x(o,i,r,n,t[a+14],17,-1502002290),n=x(n,o,i,r,t[a+15],22,1236535329),r=I(r,n,o,i,t[a+1],5,-165796510),i=I(i,r,n,o,t[a+6],9,-1069501632),o=I(o,i,r,n,t[a+11],14,643717713),n=I(n,o,i,r,t[a],20,-373897302),r=I(r,n,o,i,t[a+5],5,-701558691),i=I(i,r,n,o,t[a+10],9,38016083),o=I(o,i,r,n,t[a+15],14,-660478335),n=I(n,o,i,r,t[a+4],20,-405537848),r=I(r,n,o,i,t[a+9],5,568446438),i=I(i,r,n,o,t[a+14],9,-1019803690),o=I(o,i,r,n,t[a+3],14,-187363961),n=I(n,o,i,r,t[a+8],20,1163531501),r=I(r,n,o,i,t[a+13],5,-1444681467),i=I(i,r,n,o,t[a+2],9,-51403784),o=I(o,i,r,n,t[a+7],14,1735328473),n=I(n,o,i,r,t[a+12],20,-1926607734),r=C(r,n,o,i,t[a+5],4,-378558),i=C(i,r,n,o,t[a+8],11,-2022574463),o=C(o,i,r,n,t[a+11],16,1839030562),n=C(n,o,i,r,t[a+14],23,-35309556),r=C(r,n,o,i,t[a+1],4,-1530992060),i=C(i,r,n,o,t[a+4],11,1272893353),o=C(o,i,r,n,t[a+7],16,-155497632),n=C(n,o,i,r,t[a+10],23,-1094730640),r=C(r,n,o,i,t[a+13],4,681279174),i=C(i,r,n,o,t[a],11,-358537222),o=C(o,i,r,n,t[a+3],16,-722521979),n=C(n,o,i,r,t[a+6],23,76029189),r=C(r,n,o,i,t[a+9],4,-640364487),i=C(i,r,n,o,t[a+12],11,-421815835),o=C(o,i,r,n,t[a+15],16,530742520),n=C(n,o,i,r,t[a+2],23,-995338651),r=L(r,n,o,i,t[a],6,-198630844),i=L(i,r,n,o,t[a+7],10,1126891415),o=L(o,i,r,n,t[a+14],15,-1416354905),n=L(n,o,i,r,t[a+5],21,-57434055),r=L(r,n,o,i,t[a+12],6,1700485571),i=L(i,r,n,o,t[a+3],10,-1894986606),o=L(o,i,r,n,t[a+10],15,-1051523),n=L(n,o,i,r,t[a+1],21,-2054922799),r=L(r,n,o,i,t[a+8],6,1873313359),i=L(i,r,n,o,t[a+15],10,-30611744),o=L(o,i,r,n,t[a+6],15,-1560198380),n=L(n,o,i,r,t[a+13],21,1309151649),r=L(r,n,o,i,t[a+4],6,-145523070),i=L(i,r,n,o,t[a+11],10,-1120210379),o=L(o,i,r,n,t[a+2],15,718787259),n=L(n,o,i,r,t[a+9],21,-343485551),r=m(r,s),n=m(n,u),o=m(o,c),i=m(i,l)}return[r,n,o,i]}(function(t){if(0===t.length)return[];for(var e=8*t.length,r=new Uint32Array(y(e)),n=0;n<e;n+=8)r[n>>5]|=(255&t[n/8])<<n%32;return r}(t),8*t.length))}));var P=function(t,e,r){var n=(t=t||{}).random||(t.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){r=r||0;for(var o=0;o<16;++o)e[r+o]=n[o];return e}return f(n)};function E(t,e,r,n){switch(t){case 0:return e&r^~e&n;case 1:return e^r^n;case 2:return e&r^e&n^r&n;case 3:return e^r^n}}function T(t,e){return t<<e|t>>>32-e}var D=w("v5",80,(function(t){var e=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){var n=unescape(encodeURIComponent(t));t=[];for(var o=0;o<n.length;++o)t.push(n.charCodeAt(o))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);for(var i=t.length/4+2,a=Math.ceil(i/16),s=new Array(a),u=0;u<a;++u){for(var c=new Uint32Array(16),l=0;l<16;++l)c[l]=t[64*u+4*l]<<24|t[64*u+4*l+1]<<16|t[64*u+4*l+2]<<8|t[64*u+4*l+3];s[u]=c}s[a-1][14]=8*(t.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(t.length-1)&4294967295;for(var d=0;d<a;++d){for(var f=new Uint32Array(80),h=0;h<16;++h)f[h]=s[d][h];for(var g=16;g<80;++g)f[g]=T(f[g-3]^f[g-8]^f[g-14]^f[g-16],1);for(var v=r[0],p=r[1],w=r[2],y=r[3],m=r[4],b=0;b<80;++b){var x=Math.floor(b/20),I=T(v,5)+E(x,p,w,y)+m+e[x]+f[b]>>>0;m=y,y=w,w=T(p,30)>>>0,p=v,v=I}r[0]=r[0]+v>>>0,r[1]=r[1]+p>>>0,r[2]=r[2]+w>>>0,r[3]=r[3]+y>>>0,r[4]=r[4]+m>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]})),G="00000000-0000-0000-0000-000000000000";var M=function(t){if(!s(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0luaXRpYWxpemVDYW52YXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NhbnZhc0NvbnRleHRNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MzUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9tZDUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92My5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc2hhMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmVyc2lvbi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkNhbnZhcyIsImV4dGVuc2lvbk9iamVjdCIsIkNhbnZhczJkIiwiQ29udGV4dE1hbmFnZXIiLCJXZWJHTCIsImluaXRpYWxpemUiLCJ3aW5kb3ciLCJjb250ZXh0TmFtZSIsImNvbnRleHRzIiwiTWFwIiwiaW1hZ2VDYWNoZSIsIndlYkdMT2JqZWN0IiwiQXJyYXkiLCJ3ZWJHTENvbnRleHQiLCJwYXR0ZXJucyIsIndlYkdMVHlwZXMiLCJXZWJHTEJ1ZmZlciIsIldlYkdMU2hhZGVyIiwiV2ViR0xQcm9ncmFtIiwiV2ViR0xGcmFtZWJ1ZmZlciIsIldlYkdMUmVuZGVyYnVmZmVyIiwiV2ViR0xUZXh0dXJlIiwiV2ViR0xVbmlmb3JtTG9jYXRpb24iLCJyZXBvcnRJbWFnZUxvYWRlZCIsImd1aWQiLCJjb25zb2xlIiwibG9nIiwiRG90TmV0IiwiaW52b2tlTWV0aG9kQXN5bmMiLCJhZGQiLCJjYW52YXMiLCJwYXJhbWV0ZXJzIiwiRXJyb3IiLCJ0aGlzIiwiaWQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInNldCIsInJlbW92ZSIsImRlbGV0ZSIsInNldFByb3BlcnR5Iiwic2V0UHJvcGVydHlXaXRoQ29udGV4dCIsImdldFByb3BlcnR5Iiwic2VyaWFsaXplIiwibWV0aG9kIiwiYXJncyIsImNhbGxXaXRoQ29udGV4dCIsImNhbGxCYXRjaCIsImJhdGNoZWRDYWxscyIsImxlbmd0aCIsInBhcmFtcyIsInNsaWNlIiwiaXNBcnJheSIsImRyYXdJbWFnZVBhdGgyRCIsInBhdGgyRCIsIlBhdGgyRCIsInNldFRyYW5zZm9ybSIsImZpbGwiLCJkcmF3SW1hZ2VEZWZhdWx0UGF0aDJEIiwicGF0aCIsImxvYWRJbWFnZUJhc2U2NCIsIl8iLCJpbWciLCJJbWFnZSIsInNlbGYiLCJvbmxvYWQiLCJzcmMiLCJpc0RyYXduIiwiZHJhd0ltYWdlQmFzZTY0IiwieCIsInkiLCJ3IiwiaCIsInVuZGVmaW5lZCIsIkJvb2xlYW4iLCJkcmF3SW1hZ2UiLCJjdXN0b21Sb3VuZGVkUmVjdCIsImN0eCIsIndpZHRoIiwiaGVpZ2h0IiwicmFkaXVzIiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsImNsb3NlUGF0aCIsInJlc3VsdCIsInByb3RvdHlwZXMiLCJhcHBseSIsIm1hcCIsImRlc2VyaWFsaXplIiwiZW5kc1dpdGgiLCJJbnQ4QXJyYXkiLCJvZiIsImJpblN0ciIsImF0b2IiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJjaGFyQ29kZUF0IiwiVGV4dE1ldHJpY3MiLCJ0eXBlIiwiZmluZCIsInB1c2giLCJ3ZWJHTFR5cGUiLCJDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJnZXRSYW5kb21WYWx1ZXMiLCJjcnlwdG8iLCJtc0NyeXB0byIsInJuZHM4Iiwicm5nIiwidXVpZCIsInRlc3QiLCJieXRlVG9IZXgiLCJ0b1N0cmluZyIsInN1YnN0ciIsIl9ub2RlSWQiLCJfY2xvY2tzZXEiLCJhcnIiLCJvZmZzZXQiLCJhcmd1bWVudHMiLCJ0b0xvd2VyQ2FzZSIsIlR5cGVFcnJvciIsIl9sYXN0TVNlY3MiLCJfbGFzdE5TZWNzIiwib3B0aW9ucyIsImJ1ZiIsImIiLCJub2RlIiwiY2xvY2tzZXEiLCJzZWVkQnl0ZXMiLCJyYW5kb20iLCJtc2VjcyIsIkRhdGUiLCJub3ciLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJ2IiwicGFyc2VJbnQiLCJnZW5lcmF0ZVVVSUQiLCJuYW1lc3BhY2UiLCJzdHIiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ1RvQnl0ZXMiLCJoYXNoZnVuYyIsInZlcnNpb24iLCJlcnIiLCJETlMiLCJVUkwiLCJnZXRPdXRwdXRMZW5ndGgiLCJpbnB1dExlbmd0aDgiLCJzYWZlQWRkIiwibHN3IiwibWQ1Y21uIiwicSIsImEiLCJudW0iLCJjbnQiLCJtZDVmZiIsIm1kNWdnIiwibWQ1aGgiLCJtZDVpaSIsInYzNSIsIm1zZyIsImlucHV0Iiwib3V0cHV0IiwibGVuZ3RoMzIiLCJoZXgiLCJjaGFyQXQiLCJtZDVUb0hleEVuY29kZWRBcnJheSIsImxlbiIsIm9sZGEiLCJvbGRiIiwib2xkYyIsIm9sZGQiLCJ3b3Jkc1RvTWQ1IiwibGVuZ3RoOCIsIlVpbnQzMkFycmF5IiwiYnl0ZXNUb1dvcmRzIiwicm5kcyIsImYiLCJ6IiwiUk9UTCIsIksiLCJIIiwiTiIsIk1hdGgiLCJjZWlsIiwiTSIsIl9pIiwiaiIsInBvdyIsImZsb29yIiwiX2kyIiwiVyIsIl90IiwiZSIsIl90MiIsIlQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JV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QUFJb04sRUFBSzFELEVBQUcsTUFBUSxFQUNwQkEsRUFBSStCLEVBQ0pBLEVBQUkyQyxFQUdOZCxFQUFFLEdBQUtBLEVBQUUsR0FBSzdCLElBQU0sRUFDcEI2QixFQUFFLEdBQUtBLEVBQUUsR0FBSzVELElBQU0sRUFDcEI0RCxFQUFFLEdBQUtBLEVBQUUsR0FBS3ROLElBQU0sRUFDcEJzTixFQUFFLEdBQUtBLEVBQUUsR0FBS3JOLElBQU0sRUFDcEJxTixFQUFFLEdBQUtBLEVBQUUsR0FBS1ksSUFBTSxFQUd0QixNQUFPLENBQUNaLEVBQUUsSUFBTSxHQUFLLElBQU1BLEVBQUUsSUFBTSxHQUFLLElBQU1BLEVBQUUsSUFBTSxFQUFJLElBQWEsSUFBUEEsRUFBRSxHQUFXQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sRUFBSSxJQUFhLElBQVBBLEVBQUUsR0FBV0EsRUFBRSxJQUFNLEdBQUssSUFBTUEsRUFBRSxJQUFNLEdBQUssSUFBTUEsRUFBRSxJQUFNLEVBQUksSUFBYSxJQUFQQSxFQUFFLEdBQVdBLEVBQUUsSUFBTSxHQUFLLElBQU1BLEVBQUUsSUFBTSxHQUFLLElBQU1BLEVBQUUsSUFBTSxFQUFJLElBQWEsSUFBUEEsRUFBRSxHQUFXQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sRUFBSSxJQUFhLElBQVBBLEVBQUUsT0U1RnpVLHlDQ1VBLE1BUmYsU0FBaUI1RSxHQUNmLElBQUssRUFBU0EsR0FDWixNQUFNVyxVQUFVLGdCQUdsQixPQUFPa0IsU0FBUzdCLEVBQUtJLE9BQU8sR0FBSSxHQUFJIiwiZmlsZSI6ImJsYXpvci5leHRlbnNpb25zLmNhbnZhcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCB7IENvbnRleHRNYW5hZ2VyIH0gZnJvbSAnLi9DYW52YXNDb250ZXh0TWFuYWdlcic7XHJcblxyXG5uYW1lc3BhY2UgQ2FudmFzIHtcclxuICBjb25zdCBibGF6b3JFeHRlbnNpb25zOiBzdHJpbmcgPSAnQmxhem9yRXh0ZW5zaW9ucyc7XHJcbiAgLy8gZGVmaW5lIHdoYXQgdGhpcyBleHRlbnNpb24gYWRkcyB0byB0aGUgd2luZG93IG9iamVjdCBpbnNpZGUgQmxhem9yRXh0ZW5zaW9uc1xyXG4gIGNvbnN0IGV4dGVuc2lvbk9iamVjdCA9IHtcclxuICAgIENhbnZhczJkOiBuZXcgQ29udGV4dE1hbmFnZXIoXCIyZFwiKSxcclxuICAgIFdlYkdMOiBuZXcgQ29udGV4dE1hbmFnZXIoXCJ3ZWJnbFwiKVxyXG4gIH07XHJcblxyXG4gIGV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKCk6IHZvaWQge1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICF3aW5kb3dbYmxhem9yRXh0ZW5zaW9uc10pIHtcclxuICAgICAgLy8gd2hlbiB0aGUgbGlicmFyeSBpcyBsb2FkZWQgaW4gYSBicm93c2VyIHZpYSBhIDxzY3JpcHQ+IGVsZW1lbnQsIG1ha2UgdGhlXHJcbiAgICAgIC8vIGZvbGxvd2luZyBBUElzIGF2YWlsYWJsZSBpbiBnbG9iYWwgc2NvcGUgZm9yIGludm9jYXRpb24gZnJvbSBKU1xyXG4gICAgICB3aW5kb3dbYmxhem9yRXh0ZW5zaW9uc10gPSB7XHJcbiAgICAgICAgLi4uZXh0ZW5zaW9uT2JqZWN0XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3aW5kb3dbYmxhem9yRXh0ZW5zaW9uc10gPSB7XHJcbiAgICAgICAgLi4ud2luZG93W2JsYXpvckV4dGVuc2lvbnNdLFxyXG4gICAgICAgIC4uLmV4dGVuc2lvbk9iamVjdFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuQ2FudmFzLmluaXRpYWxpemUoKTtcclxuIiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb250ZXh0TWFuYWdlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjb250ZXh0cyA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBpbWFnZUNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIEhUTUxJbWFnZUVsZW1lbnQ+KCk7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB3ZWJHTE9iamVjdCA9IG5ldyBBcnJheTxhbnk+KCk7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjb250ZXh0TmFtZTogc3RyaW5nO1xyXG4gIHByaXZhdGUgd2ViR0xDb250ZXh0ID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBwcm90b3R5cGVzOiBhbnk7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgcGF0dGVybnMgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHdlYkdMVHlwZXMgPSBbXHJcbiAgICBXZWJHTEJ1ZmZlcixcclxuICAgIFdlYkdMU2hhZGVyLFxyXG4gICAgV2ViR0xQcm9ncmFtLFxyXG4gICAgV2ViR0xGcmFtZWJ1ZmZlcixcclxuICAgIFdlYkdMUmVuZGVyYnVmZmVyLFxyXG4gICAgV2ViR0xUZXh0dXJlLFxyXG4gICAgV2ViR0xVbmlmb3JtTG9jYXRpb24sXHJcbiAgXTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNvbnRleHROYW1lOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuY29udGV4dE5hbWUgPSBjb250ZXh0TmFtZTtcclxuICAgIGlmIChjb250ZXh0TmFtZSA9PT0gXCIyZFwiKVxyXG4gICAgICB0aGlzLnByb3RvdHlwZXMgPSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQucHJvdG90eXBlO1xyXG4gICAgZWxzZSBpZiAoY29udGV4dE5hbWUgPT09IFwid2ViZ2xcIiB8fCBjb250ZXh0TmFtZSA9PT0gXCJleHBlcmltZW50YWwtd2ViZ2xcIikge1xyXG4gICAgICB0aGlzLnByb3RvdHlwZXMgPSBXZWJHTFJlbmRlcmluZ0NvbnRleHQucHJvdG90eXBlO1xyXG4gICAgICB0aGlzLndlYkdMQ29udGV4dCA9IHRydWU7XHJcbiAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbnRleHQgbmFtZTogJHtjb250ZXh0TmFtZX1gKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVwb3J0SW1hZ2VMb2FkZWQgPSAoZ3VpZDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhcImluIGNhbGxJbWFnZUxvYWRlZCBndWlkPVwiLCBndWlkKTtcclxuICAgIERvdE5ldC5pbnZva2VNZXRob2RBc3luYyhcIkJsYXpvci5FeHRlbnNpb25zLkNhbnZhc1wiLCBcIkltYWdlTG9hZGVkXCIsIGd1aWQpO1xyXG4gIH07XHJcblxyXG4gIHB1YmxpYyBhZGQgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgcGFyYW1ldGVyczogYW55KSA9PiB7XHJcbiAgICBpZiAoIWNhbnZhcykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjYW52YXMuXCIpO1xyXG4gICAgaWYgKHRoaXMuY29udGV4dHMuZ2V0KGNhbnZhcy5pZCkpIHJldHVybjtcclxuXHJcbiAgICB2YXIgY29udGV4dDtcclxuICAgIGlmIChwYXJhbWV0ZXJzKSBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQodGhpcy5jb250ZXh0TmFtZSwgcGFyYW1ldGVycyk7XHJcbiAgICBlbHNlIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCh0aGlzLmNvbnRleHROYW1lKTtcclxuXHJcbiAgICBpZiAoIWNvbnRleHQpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29udGV4dC5cIik7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0cy5zZXQoY2FudmFzLmlkLCBjb250ZXh0KTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgcmVtb3ZlID0gKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpID0+IHtcclxuICAgIHRoaXMuY29udGV4dHMuZGVsZXRlKGNhbnZhcy5pZCk7XHJcbiAgfTtcclxuXHJcbiAgcHVibGljIHNldFByb3BlcnR5ID0gKFxyXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcclxuICAgIHByb3BlcnR5OiBzdHJpbmcsXHJcbiAgICB2YWx1ZTogYW55XHJcbiAgKSA9PiB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGNhbnZhcyk7XHJcbiAgICB0aGlzLnNldFByb3BlcnR5V2l0aENvbnRleHQoY29udGV4dCwgcHJvcGVydHksIHZhbHVlKTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgZ2V0UHJvcGVydHkgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgcHJvcGVydHk6IHN0cmluZykgPT4ge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChjYW52YXMpO1xyXG4gICAgcmV0dXJuIHRoaXMuc2VyaWFsaXplKGNvbnRleHRbcHJvcGVydHldKTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgY2FsbCA9IChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBtZXRob2Q6IHN0cmluZywgYXJnczogYW55KSA9PiB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGNhbnZhcyk7XHJcbiAgICByZXR1cm4gdGhpcy5jYWxsV2l0aENvbnRleHQoY29udGV4dCwgbWV0aG9kLCBhcmdzKTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgY2FsbEJhdGNoID0gKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGJhdGNoZWRDYWxsczogYW55W11bXSkgPT4ge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChjYW52YXMpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXRjaGVkQ2FsbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IHBhcmFtcyA9IGJhdGNoZWRDYWxsc1tpXS5zbGljZSgyKTtcclxuICAgICAgaWYgKGJhdGNoZWRDYWxsc1tpXVsxXSkge1xyXG4gICAgICAgIHRoaXMuY2FsbFdpdGhDb250ZXh0KGNvbnRleHQsIGJhdGNoZWRDYWxsc1tpXVswXSwgcGFyYW1zKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnNldFByb3BlcnR5V2l0aENvbnRleHQoXHJcbiAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgYmF0Y2hlZENhbGxzW2ldWzBdLFxyXG4gICAgICAgICAgQXJyYXkuaXNBcnJheShwYXJhbXMpICYmIHBhcmFtcy5sZW5ndGggPiAwID8gcGFyYW1zWzBdIDogbnVsbFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBwdWJsaWMgZHJhd0ltYWdlUGF0aDJEID0gKFxyXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcclxuICAgIHBhcmFtZXRlcnM6IFtzdHJpbmcsIG51bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdXHJcbiAgKSA9PiB7XHJcbiAgICBpZiAoIWNhbnZhcykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjYW52YXMgaW4gZHJhd0ltYWdlUGF0aDJELlwiKTtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHRzLmdldChjYW52YXMuaWQpO1xyXG4gICAgaWYgKCFjb250ZXh0KSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbnRleHQgaW4gZHJhd0ltYWdlUGF0aDJELlwiKTtcclxuXHJcbiAgICBjb25zdCBwYXRoMkQgPSBuZXcgUGF0aDJEKHBhcmFtZXRlcnNbMF0pO1xyXG4gICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oXHJcbiAgICAgIHBhcmFtZXRlcnNbMV0sXHJcbiAgICAgIHBhcmFtZXRlcnNbMl0sXHJcbiAgICAgIHBhcmFtZXRlcnNbM10sXHJcbiAgICAgIHBhcmFtZXRlcnNbNF0sXHJcbiAgICAgIHBhcmFtZXRlcnNbNV0sXHJcbiAgICAgIHBhcmFtZXRlcnNbNl1cclxuICAgICk7XHJcblxyXG4gICAgY29udGV4dC5maWxsKHBhdGgyRCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICBwdWJsaWMgZHJhd0ltYWdlRGVmYXVsdFBhdGgyRCA9IChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBwYXRoOiBzdHJpbmcpID0+IHtcclxuICAgIGlmICghY2FudmFzKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNhbnZhcyBpbiBkcmF3SW1hZ2VQYXRoMkQuXCIpO1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dHMuZ2V0KGNhbnZhcy5pZCk7XHJcbiAgICBpZiAoIWNvbnRleHQpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29udGV4dCBpbiBkcmF3SW1hZ2VQYXRoMkQuXCIpO1xyXG5cclxuICAgIGNvbnN0IHBhdGgyRCA9IG5ldyBQYXRoMkQocGF0aCk7XHJcbiAgICBjb250ZXh0LmZpbGwocGF0aDJEKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIHB1YmxpYyBsb2FkSW1hZ2VCYXNlNjQgPSAoXHJcbiAgICBfOiBIVE1MQ2FudmFzRWxlbWVudCxcclxuICAgIFtndWlkLCBwYXRoXTogW3N0cmluZywgc3RyaW5nXVxyXG4gICkgPT4ge1xyXG4gICAgY29uc3QgZm91bmQgPSB0aGlzLmltYWdlQ2FjaGUuZ2V0KGd1aWQpO1xyXG4gICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgIHRoaXMucmVwb3J0SW1hZ2VMb2FkZWQoZ3VpZCk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgaW1nLmlkID0gZ3VpZDtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgdGhpcy5pbWFnZUNhY2hlLnNldChndWlkLCBpbWcpO1xyXG4gICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc29sZS5sb2coXCJpbml0aWFsIGltYWdlIGxvYWRlZFwiKTtcclxuICAgICAgc2VsZi5yZXBvcnRJbWFnZUxvYWRlZChndWlkKTtcclxuICAgIH07XHJcbiAgICBpbWcuc3JjID0gcGF0aDtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgaXNEcmF3biA9IGZhbHNlO1xyXG5cclxuICBwdWJsaWMgZHJhd0ltYWdlQmFzZTY0ID0gKFxyXG4gICAgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCxcclxuICAgIFtndWlkLCB4LCB5LCB3LCBoXTogW3N0cmluZywgbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVxyXG4gICkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJkcmF3SW1hZ2VCYXNlNjQgZ3VpZD1cIiwgZ3VpZCwgeCwgeSwgdywgaCk7XHJcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuO1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dHMuZ2V0KGNhbnZhcy5pZCk7XHJcbiAgICAvLyBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgIGlmICghY29udGV4dCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb250ZXh0IGluIGRyYXdJbWFnZUJhc2U2NC5cIik7XHJcblxyXG4gICAgY29uc3QgaW1nID0gdGhpcy5pbWFnZUNhY2hlLmdldChndWlkKTtcclxuICAgIGlmIChpbWcgIT09IHVuZGVmaW5lZCkgY29uc29sZS5sb2coXCJkcmF3SW1hZ2VCYXNlNjQgaW1nPVwiLCBpbWcuaWQpO1xyXG4gICAgaWYgKEJvb2xlYW4oaW1nKSkge1xyXG4gICAgICBpZiAoIXRoaXMuaXNEcmF3bikgY29udGV4dC5kcmF3SW1hZ2UoaW1nLCB4LCB5LCB3LCBoKTtcclxuICAgICAgdGhpcy5pc0RyYXduID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiZHJhd0ltYWdlQmFzZTY0IE5vIGltYWdlIGZvdW5kIGZvciBndWlkPVwiLCBndWlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIHB1YmxpYyBjdXN0b21Sb3VuZGVkUmVjdCA9IChcclxuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsXHJcbiAgICBwYXJhbWV0ZXJzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdXHJcbiAgKSA9PiB7XHJcbiAgICBpZiAoIWNhbnZhcykgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjYW52YXMgaW4gY3VzdG9tUm91bmRlZFJlY3QuXCIpO1xyXG4gICAgY29uc3QgY3R4ID0gdGhpcy5jb250ZXh0cy5nZXQoY2FudmFzLmlkKTtcclxuICAgIGlmICghY3R4KSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbnRleHQgaW4gY3VzdG9tUm91bmRlZFJlY3QuXCIpO1xyXG5cclxuICAgIGNvbnN0IHggPSBwYXJhbWV0ZXJzWzBdO1xyXG4gICAgY29uc3QgeSA9IHBhcmFtZXRlcnNbMV07XHJcbiAgICBjb25zdCB3aWR0aCA9IHBhcmFtZXRlcnNbMl07XHJcbiAgICBjb25zdCBoZWlnaHQgPSBwYXJhbWV0ZXJzWzNdO1xyXG4gICAgY29uc3QgcmFkaXVzID0gcGFyYW1ldGVyc1s0XTtcclxuICAgIC8vIChjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cylcclxuICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgIGN0eC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XHJcbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XHJcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyk7XHJcbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XHJcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XHJcbiAgICBjdHgubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xyXG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSArIGhlaWdodCwgeCwgeSArIGhlaWdodCAtIHJhZGl1cyk7XHJcbiAgICBjdHgubGluZVRvKHgsIHkgKyByYWRpdXMpO1xyXG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XHJcbiAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIGNhbGxXaXRoQ29udGV4dCA9IChjb250ZXh0OiBhbnksIG1ldGhvZDogc3RyaW5nLCBhcmdzOiBhbnkpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucHJvdG90eXBlc1ttZXRob2RdLmFwcGx5KFxyXG4gICAgICBjb250ZXh0LFxyXG4gICAgICBhcmdzICE9IHVuZGVmaW5lZFxyXG4gICAgICAgID8gYXJncy5tYXAoKHZhbHVlKSA9PiB0aGlzLmRlc2VyaWFsaXplKG1ldGhvZCwgdmFsdWUpKVxyXG4gICAgICAgIDogW11cclxuICAgICk7XHJcblxyXG4gICAgaWYgKG1ldGhvZCA9PSBcImNyZWF0ZVBhdHRlcm5cIikge1xyXG4gICAgICBjb25zdCBrZXkgPSB1dWlkdjQoKTtcclxuICAgICAgdGhpcy5wYXR0ZXJucy5zZXQoa2V5LCByZXN1bHQpO1xyXG4gICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZShyZXN1bHQpO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgc2V0UHJvcGVydHlXaXRoQ29udGV4dCA9IChcclxuICAgIGNvbnRleHQ6IGFueSxcclxuICAgIHByb3BlcnR5OiBzdHJpbmcsXHJcbiAgICB2YWx1ZTogYW55XHJcbiAgKSA9PiB7XHJcbiAgICBpZiAocHJvcGVydHkgPT0gXCJmaWxsU3R5bGVcIikge1xyXG4gICAgICB2YWx1ZSA9IHRoaXMucGF0dGVybnMuZ2V0KHZhbHVlKSB8fCB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0W3Byb3BlcnR5XSA9IHRoaXMuZGVzZXJpYWxpemUocHJvcGVydHksIHZhbHVlKTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIGdldENvbnRleHQgPSAoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKCFjYW52YXMpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FudmFzLlwiKTtcclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0cy5nZXQoY2FudmFzLmlkKTtcclxuICAgIGlmICghY29udGV4dCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb250ZXh0LlwiKTtcclxuXHJcbiAgICByZXR1cm4gY29udGV4dDtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIGRlc2VyaWFsaXplID0gKG1ldGhvZDogc3RyaW5nLCBvYmplY3Q6IGFueSkgPT4ge1xyXG4gICAgaWYgKCF0aGlzLndlYkdMQ29udGV4dCB8fCBvYmplY3QgPT0gdW5kZWZpbmVkKSByZXR1cm4gb2JqZWN0OyAvL2Rlc2VyaWFsaXphdGlvbiBvbmx5IG5lZWRzIHRvIGhhcHBlbiBmb3Igd2ViR0xcclxuXHJcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KFwid2ViR0xUeXBlXCIpICYmIG9iamVjdC5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLndlYkdMT2JqZWN0W29iamVjdFtcImlkXCJdXTtcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpICYmICFtZXRob2QuZW5kc1dpdGgoXCJ2XCIpKSB7XHJcbiAgICAgIHJldHVybiBJbnQ4QXJyYXkub2YoLi4uKG9iamVjdCBhcyBudW1iZXJbXSkpO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgdHlwZW9mIG9iamVjdCA9PT0gXCJzdHJpbmdcIiAmJlxyXG4gICAgICAobWV0aG9kID09PSBcImJ1ZmZlckRhdGFcIiB8fCBtZXRob2QgPT09IFwiYnVmZmVyU3ViRGF0YVwiKVxyXG4gICAgKSB7XHJcbiAgICAgIGxldCBiaW5TdHIgPSB3aW5kb3cuYXRvYihvYmplY3QpO1xyXG4gICAgICBsZXQgbGVuZ3RoID0gYmluU3RyLmxlbmd0aDtcclxuICAgICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGJ5dGVzW2ldID0gYmluU3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGJ5dGVzO1xyXG4gICAgfSBlbHNlIHJldHVybiBvYmplY3Q7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBzZXJpYWxpemUgPSAob2JqZWN0OiBhbnkpID0+IHtcclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBUZXh0TWV0cmljcykge1xyXG4gICAgICByZXR1cm4geyB3aWR0aDogb2JqZWN0LndpZHRoIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF0aGlzLndlYkdMQ29udGV4dCB8fCBvYmplY3QgPT0gdW5kZWZpbmVkKSByZXR1cm4gb2JqZWN0OyAvL3NlcmlhbGl6YXRpb24gb25seSBuZWVkcyB0byBoYXBwZW4gZm9yIHdlYkdMXHJcblxyXG4gICAgY29uc3QgdHlwZSA9IHRoaXMud2ViR0xUeXBlcy5maW5kKCh0eXBlKSA9PiBvYmplY3QgaW5zdGFuY2VvZiB0eXBlKTtcclxuICAgIGlmICh0eXBlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICBjb25zdCBpZCA9IHRoaXMud2ViR0xPYmplY3QubGVuZ3RoO1xyXG4gICAgICB0aGlzLndlYkdMT2JqZWN0LnB1c2gob2JqZWN0KTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgd2ViR0xUeXBlOiB0eXBlLm5hbWUsXHJcbiAgICAgICAgaWQ6IGlkLFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHJldHVybiBvYmplY3Q7XHJcbiAgfTtcclxufVxyXG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbi8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnOyAvLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbnZhciBfbm9kZUlkO1xuXG52YXIgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG52YXIgX2xhc3RNU2VjcyA9IDA7XG52YXIgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICB2YXIgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW3NlZWRCeXRlc1swXSB8IDB4MDEsIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcbiAgICB9XG5cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH0gLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG5cblxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogRGF0ZS5ub3coKTsgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTsgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuXG4gIHZhciBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICB2YXIgdG1oID0gbXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwICYgMHhmZmZmZmZmO1xuICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bWggJiAweGZmOyAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb25cblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjsgLy8gYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgIChQZXIgNC4yLjIgLSBpbmNsdWRlIHZhcmlhbnQpXG5cbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwOyAvLyBgY2xvY2tfc2VxX2xvd2BcblxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7IC8vIGBub2RlYFxuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBzdHJpbmdpZnkoYik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHYxOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHZhciB2O1xuICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlOyIsImltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgdmFyIGJ5dGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IHZhciBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCB2YXIgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCIvKlxuICogQnJvd3Nlci1jb21wYXRpYmxlIEphdmFTY3JpcHQgTUQ1XG4gKlxuICogTW9kaWZpY2F0aW9uIG9mIEphdmFTY3JpcHQgTUQ1XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9KYXZhU2NyaXB0LU1ENVxuICpcbiAqIENvcHlyaWdodCAyMDExLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqXG4gKiBCYXNlZCBvblxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZVxuICogRGlnZXN0IEFsZ29yaXRobSwgYXMgZGVmaW5lZCBpbiBSRkMgMTMyMS5cbiAqIFZlcnNpb24gMi4yIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwOVxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgbW9yZSBpbmZvLlxuICovXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KG1zZy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzW2ldID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1kNVRvSGV4RW5jb2RlZEFycmF5KHdvcmRzVG9NZDUoYnl0ZXNUb1dvcmRzKGJ5dGVzKSwgYnl0ZXMubGVuZ3RoICogOCkpO1xufVxuLypcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcyB0byBhbiBhcnJheSBvZiBieXRlc1xuICovXG5cblxuZnVuY3Rpb24gbWQ1VG9IZXhFbmNvZGVkQXJyYXkoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgbGVuZ3RoMzIgPSBpbnB1dC5sZW5ndGggKiAzMjtcbiAgdmFyIGhleFRhYiA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDMyOyBpICs9IDgpIHtcbiAgICB2YXIgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7XG4gICAgdmFyIGhleCA9IHBhcnNlSW50KGhleFRhYi5jaGFyQXQoeCA+Pj4gNCAmIDB4MGYpICsgaGV4VGFiLmNoYXJBdCh4ICYgMHgwZiksIDE2KTtcbiAgICBvdXRwdXQucHVzaChoZXgpO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIG91dHB1dCBsZW5ndGggd2l0aCBwYWRkaW5nIGFuZCBiaXQgbGVuZ3RoXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGg4KSB7XG4gIHJldHVybiAoaW5wdXRMZW5ndGg4ICsgNjQgPj4+IDkgPDwgNCkgKyAxNCArIDE7XG59XG4vKlxuICogQ2FsY3VsYXRlIHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHdvcmRzVG9NZDUoeCwgbGVuKSB7XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgbGVuICUgMzI7XG4gIHhbZ2V0T3V0cHV0TGVuZ3RoKGxlbikgLSAxXSA9IGxlbjtcbiAgdmFyIGEgPSAxNzMyNTg0MTkzO1xuICB2YXIgYiA9IC0yNzE3MzM4Nzk7XG4gIHZhciBjID0gLTE3MzI1ODQxOTQ7XG4gIHZhciBkID0gMjcxNzMzODc4O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICB2YXIgb2xkYSA9IGE7XG4gICAgdmFyIG9sZGIgPSBiO1xuICAgIHZhciBvbGRjID0gYztcbiAgICB2YXIgb2xkZCA9IGQ7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaV0sIDcsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE0LCA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4Myk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNCwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTRdLCAyMywgLTM1MzA5NTU2KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaV0sIDExLCAtMzU4NTM3MjIyKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDldLCA0LCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaV0sIDYsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNik7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlQWRkKGMsIG9sZGMpO1xuICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICB9XG5cbiAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IGJ5dGVzIHRvIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHNcbiAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLlxuICovXG5cblxuZnVuY3Rpb24gYnl0ZXNUb1dvcmRzKGlucHV0KSB7XG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7XG4gIHZhciBvdXRwdXQgPSBuZXcgVWludDMyQXJyYXkoZ2V0T3V0cHV0TGVuZ3RoKGxlbmd0aDgpKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDg7IGkgKz0gOCkge1xuICAgIG91dHB1dFtpID4+IDVdIHw9IChpbnB1dFtpIC8gOF0gJiAweGZmKSA8PCBpICUgMzI7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLypcbiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHlcbiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBzYWZlQWRkKHgsIHkpIHtcbiAgdmFyIGxzdyA9ICh4ICYgMHhmZmZmKSArICh5ICYgMHhmZmZmKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmO1xufVxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgcmV0dXJuIG51bSA8PCBjbnQgfCBudW0gPj4+IDMyIC0gY250O1xufVxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKTtcbn1cblxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBjIHwgfmIgJiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbnZhciB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiLy8gQWRhcHRlZCBmcm9tIENocmlzIFZlbmVzcycgU0hBMSBjb2RlIGF0XG4vLyBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL3NoYTEuaHRtbFxuZnVuY3Rpb24gZihzLCB4LCB5LCB6KSB7XG4gIHN3aXRjaCAocykge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB4ICYgeSBeIH54ICYgejtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4geCAmIHkgXiB4ICYgeiBeIHkgJiB6O1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcbiAgfVxufVxuXG5mdW5jdGlvbiBST1RMKHgsIG4pIHtcbiAgcmV0dXJuIHggPDwgbiB8IHggPj4+IDMyIC0gbjtcbn1cblxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICB2YXIgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgdmFyIEggPSBbMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMF07XG5cbiAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzLnB1c2gobXNnLmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICAvLyBDb252ZXJ0IEFycmF5LWxpa2UgdG8gQXJyYXlcbiAgICBieXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ5dGVzKTtcbiAgfVxuXG4gIGJ5dGVzLnB1c2goMHg4MCk7XG4gIHZhciBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gIHZhciBOID0gTWF0aC5jZWlsKGwgLyAxNik7XG4gIHZhciBNID0gbmV3IEFycmF5KE4pO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBOOyArK19pKSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50MzJBcnJheSgxNik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIGFycltqXSA9IGJ5dGVzW19pICogNjQgKyBqICogNF0gPDwgMjQgfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNiB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDJdIDw8IDggfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAzXTtcbiAgICB9XG5cbiAgICBNW19pXSA9IGFycjtcbiAgfVxuXG4gIE1bTiAtIDFdWzE0XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggLyBNYXRoLnBvdygyLCAzMik7XG4gIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTtcbiAgTVtOIC0gMV1bMTVdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAmIDB4ZmZmZmZmZmY7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgTjsgKytfaTIpIHtcbiAgICB2YXIgVyA9IG5ldyBVaW50MzJBcnJheSg4MCk7XG5cbiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgIFdbdF0gPSBNW19pMl1bdF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX3QgPSAxNjsgX3QgPCA4MDsgKytfdCkge1xuICAgICAgV1tfdF0gPSBST1RMKFdbX3QgLSAzXSBeIFdbX3QgLSA4XSBeIFdbX3QgLSAxNF0gXiBXW190IC0gMTZdLCAxKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IEhbMF07XG4gICAgdmFyIGIgPSBIWzFdO1xuICAgIHZhciBjID0gSFsyXTtcbiAgICB2YXIgZCA9IEhbM107XG4gICAgdmFyIGUgPSBIWzRdO1xuXG4gICAgZm9yICh2YXIgX3QyID0gMDsgX3QyIDwgODA7ICsrX3QyKSB7XG4gICAgICB2YXIgcyA9IE1hdGguZmxvb3IoX3QyIC8gMjApO1xuICAgICAgdmFyIFQgPSBST1RMKGEsIDUpICsgZihzLCBiLCBjLCBkKSArIGUgKyBLW3NdICsgV1tfdDJdID4+PiAwO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSBST1RMKGIsIDMwKSA+Pj4gMDtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IFQ7XG4gICAgfVxuXG4gICAgSFswXSA9IEhbMF0gKyBhID4+PiAwO1xuICAgIEhbMV0gPSBIWzFdICsgYiA+Pj4gMDtcbiAgICBIWzJdID0gSFsyXSArIGMgPj4+IDA7XG4gICAgSFszXSA9IEhbM10gKyBkID4+PiAwO1xuICAgIEhbNF0gPSBIWzRdICsgZSA+Pj4gMDtcbiAgfVxuXG4gIHJldHVybiBbSFswXSA+PiAyNCAmIDB4ZmYsIEhbMF0gPj4gMTYgJiAweGZmLCBIWzBdID4+IDggJiAweGZmLCBIWzBdICYgMHhmZiwgSFsxXSA+PiAyNCAmIDB4ZmYsIEhbMV0gPj4gMTYgJiAweGZmLCBIWzFdID4+IDggJiAweGZmLCBIWzFdICYgMHhmZiwgSFsyXSA+PiAyNCAmIDB4ZmYsIEhbMl0gPj4gMTYgJiAweGZmLCBIWzJdID4+IDggJiAweGZmLCBIWzJdICYgMHhmZiwgSFszXSA+PiAyNCAmIDB4ZmYsIEhbM10gPj4gMTYgJiAweGZmLCBIWzNdID4+IDggJiAweGZmLCBIWzNdICYgMHhmZiwgSFs0XSA+PiAyNCAmIDB4ZmYsIEhbNF0gPj4gMTYgJiAweGZmLCBIWzRdID4+IDggJiAweGZmLCBIWzRdICYgMHhmZl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYTE7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xudmFyIHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7IiwiZXhwb3J0IGRlZmF1bHQgJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCc7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VJbnQodXVpZC5zdWJzdHIoMTQsIDEpLCAxNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247Il0sInNvdXJjZVJvb3QiOiIifQ==