!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1);var o;!function(t){const e={Canvas2d:new n.ContextManager("2d"),WebGL:new n.ContextManager("webgl")};t.initialize=function(){"undefined"==typeof window||window.BlazorExtensions?window.BlazorExtensions=Object.assign({},window.BlazorExtensions,e):window.BlazorExtensions=Object.assign({},e)}}(o||(o={})),o.initialize()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(2);e.ContextManager=class{constructor(t){if(this.contexts=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.patterns=new Map,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation],this.add=(t,e)=>{if(!t)throw new Error("Invalid canvas.");if(!this.contexts.get(t.id)){var r;if(!(r=e?t.getContext(this.contextName,e):t.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(t.id,r)}},this.remove=t=>{this.contexts.delete(t.id)},this.setProperty=(t,e,r)=>{const n=this.getContext(t);this.setPropertyWithContext(n,e,r)},this.getProperty=(t,e)=>{const r=this.getContext(t);return this.serialize(r[e])},this.call=(t,e,r)=>{const n=this.getContext(t);return this.callWithContext(n,e,r)},this.callBatch=(t,e)=>{const r=this.getContext(t);for(let t=0;t<e.length;t++){let n=e[t].slice(2);e[t][1]?this.callWithContext(r,e[t][0],n):this.setPropertyWithContext(r,e[t][0],Array.isArray(n)&&n.length>0?n[0]:null)}},this.drawImagePath2D=(t,e)=>{if(!t)throw new Error("Invalid canvas in drawImagePath2D.");const r=this.contexts.get(t.id);if(!r)throw new Error("Invalid context in drawImagePath2D.");const n=new Path2D(e[0]);return r.setTransform(e[1],e[2],e[3],e[4],e[5],e[6]),r.fill(n),!0},this.drawImageDefaultPath2D=(t,e)=>{if(!t)throw new Error("Invalid canvas in drawImagePath2D.");const r=this.contexts.get(t.id);if(!r)throw new Error("Invalid context in drawImagePath2D.");const n=new Path2D(e);return r.fill(n),!0},this.callWithContext=(t,e,r)=>{const o=this.prototypes[e].apply(t,null!=r?r.map(t=>this.deserialize(e,t)):[]);if("createPattern"==e){const t=n.v4();return this.patterns.set(t,o),t}return this.serialize(o)},this.setPropertyWithContext=(t,e,r)=>{"fillStyle"==e&&(r=this.patterns.get(r)||r),t[e]=this.deserialize(e,r)},this.getContext=t=>{if(!t)throw new Error("Invalid canvas.");const e=this.contexts.get(t.id);if(!e)throw new Error("Invalid context.");return e},this.deserialize=(t,e)=>{if(!this.webGLContext||null==e)return e;if(e.hasOwnProperty("webGLType")&&e.hasOwnProperty("id"))return this.webGLObject[e.id];if(Array.isArray(e)&&!t.endsWith("v"))return Int8Array.of(...e);if("string"!=typeof e||"bufferData"!==t&&"bufferSubData"!==t)return e;{let t=window.atob(e),n=t.length,o=new Uint8Array(n);for(var r=0;r<n;r++)o[r]=t.charCodeAt(r);return o}},this.serialize=t=>{if(t instanceof TextMetrics)return{width:t.width};if(!this.webGLContext||null==t)return t;const e=this.webGLTypes.find(e=>t instanceof e);if(null!=e){const r=this.webGLObject.length;return this.webGLObject.push(t),{webGLType:e.name,id:r}}return t},this.contextName=t,"2d"===t)this.prototypes=CanvasRenderingContext2D.prototype;else{if("webgl"!==t&&"experimental-webgl"!==t)throw new Error("Invalid context name: "+t);this.prototypes=WebGLRenderingContext.prototype,this.webGLContext=!0}}}},function(t,e,r){"use strict";r.r(e),r.d(e,"v1",(function(){return v})),r.d(e,"v3",(function(){return L})),r.d(e,"v4",(function(){return P})),r.d(e,"v5",(function(){return U})),r.d(e,"NIL",(function(){return D})),r.d(e,"version",(function(){return M})),r.d(e,"validate",(function(){return s})),r.d(e,"stringify",(function(){return h})),r.d(e,"parse",(function(){return w}));var n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),o=new Uint8Array(16);function i(){if(!n)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}var a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;for(var s=function(t){return"string"==typeof t&&a.test(t)},u=[],c=0;c<256;++c)u.push((c+256).toString(16).substr(1));var f,l,h=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(u[t[e+0]]+u[t[e+1]]+u[t[e+2]]+u[t[e+3]]+"-"+u[t[e+4]]+u[t[e+5]]+"-"+u[t[e+6]]+u[t[e+7]]+"-"+u[t[e+8]]+u[t[e+9]]+"-"+u[t[e+10]]+u[t[e+11]]+u[t[e+12]]+u[t[e+13]]+u[t[e+14]]+u[t[e+15]]).toLowerCase();if(!s(r))throw TypeError("Stringified UUID is invalid");return r},d=0,p=0;var v=function(t,e,r){var n=e&&r||0,o=e||new Array(16),a=(t=t||{}).node||f,s=void 0!==t.clockseq?t.clockseq:l;if(null==a||null==s){var u=t.random||(t.rng||i)();null==a&&(a=f=[1|u[0],u[1],u[2],u[3],u[4],u[5]]),null==s&&(s=l=16383&(u[6]<<8|u[7]))}var c=void 0!==t.msecs?t.msecs:Date.now(),v=void 0!==t.nsecs?t.nsecs:p+1,w=c-d+(v-p)/1e4;if(w<0&&void 0===t.clockseq&&(s=s+1&16383),(w<0||c>d)&&void 0===t.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=c,p=v,l=s;var y=(1e4*(268435455&(c+=122192928e5))+v)%4294967296;o[n++]=y>>>24&255,o[n++]=y>>>16&255,o[n++]=y>>>8&255,o[n++]=255&y;var g=c/4294967296*1e4&268435455;o[n++]=g>>>8&255,o[n++]=255&g,o[n++]=g>>>24&15|16,o[n++]=g>>>16&255,o[n++]=s>>>8|128,o[n++]=255&s;for(var b=0;b<6;++b)o[n+b]=a[b];return e||h(o)};var w=function(t){if(!s(t))throw TypeError("Invalid UUID");var e,r=new Uint8Array(16);return r[0]=(e=parseInt(t.slice(0,8),16))>>>24,r[1]=e>>>16&255,r[2]=e>>>8&255,r[3]=255&e,r[4]=(e=parseInt(t.slice(9,13),16))>>>8,r[5]=255&e,r[6]=(e=parseInt(t.slice(14,18),16))>>>8,r[7]=255&e,r[8]=(e=parseInt(t.slice(19,23),16))>>>8,r[9]=255&e,r[10]=(e=parseInt(t.slice(24,36),16))/1099511627776&255,r[11]=e/4294967296&255,r[12]=e>>>24&255,r[13]=e>>>16&255,r[14]=e>>>8&255,r[15]=255&e,r};var y=function(t,e,r){function n(t,n,o,i){if("string"==typeof t&&(t=function(t){t=unescape(encodeURIComponent(t));for(var e=[],r=0;r<t.length;++r)e.push(t.charCodeAt(r));return e}(t)),"string"==typeof n&&(n=w(n)),16!==n.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+t.length);if(a.set(n),a.set(t,n.length),(a=r(a))[6]=15&a[6]|e,a[8]=63&a[8]|128,o){i=i||0;for(var s=0;s<16;++s)o[i+s]=a[s];return o}return h(a)}try{n.name=t}catch(t){}return n.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",n.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",n};function g(t){return 14+(t+64>>>9<<4)+1}function b(t,e){var r=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(r>>16)<<16|65535&r}function x(t,e,r,n,o,i){return b((a=b(b(e,t),b(n,i)))<<(s=o)|a>>>32-s,r);var a,s}function m(t,e,r,n,o,i,a){return x(e&r|~e&n,t,e,o,i,a)}function C(t,e,r,n,o,i,a){return x(e&n|r&~n,t,e,o,i,a)}function I(t,e,r,n,o,i,a){return x(e^r^n,t,e,o,i,a)}function A(t,e,r,n,o,i,a){return x(r^(e|~n),t,e,o,i,a)}var L=y("v3",48,(function(t){if("string"==typeof t){var e=unescape(encodeURIComponent(t));t=new Uint8Array(e.length);for(var r=0;r<e.length;++r)t[r]=e.charCodeAt(r)}return function(t){for(var e=[],r=32*t.length,n=0;n<r;n+=8){var o=t[n>>5]>>>n%32&255,i=parseInt("0123456789abcdef".charAt(o>>>4&15)+"0123456789abcdef".charAt(15&o),16);e.push(i)}return e}(function(t,e){t[e>>5]|=128<<e%32,t[g(e)-1]=e;for(var r=1732584193,n=-271733879,o=-1732584194,i=271733878,a=0;a<t.length;a+=16){var s=r,u=n,c=o,f=i;r=m(r,n,o,i,t[a],7,-680876936),i=m(i,r,n,o,t[a+1],12,-389564586),o=m(o,i,r,n,t[a+2],17,606105819),n=m(n,o,i,r,t[a+3],22,-1044525330),r=m(r,n,o,i,t[a+4],7,-176418897),i=m(i,r,n,o,t[a+5],12,1200080426),o=m(o,i,r,n,t[a+6],17,-1473231341),n=m(n,o,i,r,t[a+7],22,-45705983),r=m(r,n,o,i,t[a+8],7,1770035416),i=m(i,r,n,o,t[a+9],12,-1958414417),o=m(o,i,r,n,t[a+10],17,-42063),n=m(n,o,i,r,t[a+11],22,-1990404162),r=m(r,n,o,i,t[a+12],7,1804603682),i=m(i,r,n,o,t[a+13],12,-40341101),o=m(o,i,r,n,t[a+14],17,-1502002290),n=m(n,o,i,r,t[a+15],22,1236535329),r=C(r,n,o,i,t[a+1],5,-165796510),i=C(i,r,n,o,t[a+6],9,-1069501632),o=C(o,i,r,n,t[a+11],14,643717713),n=C(n,o,i,r,t[a],20,-373897302),r=C(r,n,o,i,t[a+5],5,-701558691),i=C(i,r,n,o,t[a+10],9,38016083),o=C(o,i,r,n,t[a+15],14,-660478335),n=C(n,o,i,r,t[a+4],20,-405537848),r=C(r,n,o,i,t[a+9],5,568446438),i=C(i,r,n,o,t[a+14],9,-1019803690),o=C(o,i,r,n,t[a+3],14,-187363961),n=C(n,o,i,r,t[a+8],20,1163531501),r=C(r,n,o,i,t[a+13],5,-1444681467),i=C(i,r,n,o,t[a+2],9,-51403784),o=C(o,i,r,n,t[a+7],14,1735328473),n=C(n,o,i,r,t[a+12],20,-1926607734),r=I(r,n,o,i,t[a+5],4,-378558),i=I(i,r,n,o,t[a+8],11,-2022574463),o=I(o,i,r,n,t[a+11],16,1839030562),n=I(n,o,i,r,t[a+14],23,-35309556),r=I(r,n,o,i,t[a+1],4,-1530992060),i=I(i,r,n,o,t[a+4],11,1272893353),o=I(o,i,r,n,t[a+7],16,-155497632),n=I(n,o,i,r,t[a+10],23,-1094730640),r=I(r,n,o,i,t[a+13],4,681279174),i=I(i,r,n,o,t[a],11,-358537222),o=I(o,i,r,n,t[a+3],16,-722521979),n=I(n,o,i,r,t[a+6],23,76029189),r=I(r,n,o,i,t[a+9],4,-640364487),i=I(i,r,n,o,t[a+12],11,-421815835),o=I(o,i,r,n,t[a+15],16,530742520),n=I(n,o,i,r,t[a+2],23,-995338651),r=A(r,n,o,i,t[a],6,-198630844),i=A(i,r,n,o,t[a+7],10,1126891415),o=A(o,i,r,n,t[a+14],15,-1416354905),n=A(n,o,i,r,t[a+5],21,-57434055),r=A(r,n,o,i,t[a+12],6,1700485571),i=A(i,r,n,o,t[a+3],10,-1894986606),o=A(o,i,r,n,t[a+10],15,-1051523),n=A(n,o,i,r,t[a+1],21,-2054922799),r=A(r,n,o,i,t[a+8],6,1873313359),i=A(i,r,n,o,t[a+15],10,-30611744),o=A(o,i,r,n,t[a+6],15,-1560198380),n=A(n,o,i,r,t[a+13],21,1309151649),r=A(r,n,o,i,t[a+4],6,-145523070),i=A(i,r,n,o,t[a+11],10,-1120210379),o=A(o,i,r,n,t[a+2],15,718787259),n=A(n,o,i,r,t[a+9],21,-343485551),r=b(r,s),n=b(n,u),o=b(o,c),i=b(i,f)}return[r,n,o,i]}(function(t){if(0===t.length)return[];for(var e=8*t.length,r=new Uint32Array(g(e)),n=0;n<e;n+=8)r[n>>5]|=(255&t[n/8])<<n%32;return r}(t),8*t.length))}));var P=function(t,e,r){var n=(t=t||{}).random||(t.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,e){r=r||0;for(var o=0;o<16;++o)e[r+o]=n[o];return e}return h(n)};function G(t,e,r,n){switch(t){case 0:return e&r^~e&n;case 1:return e^r^n;case 2:return e&r^e&n^r&n;case 3:return e^r^n}}function E(t,e){return t<<e|t>>>32-e}var U=y("v5",80,(function(t){var e=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof t){var n=unescape(encodeURIComponent(t));t=[];for(var o=0;o<n.length;++o)t.push(n.charCodeAt(o))}else Array.isArray(t)||(t=Array.prototype.slice.call(t));t.push(128);for(var i=t.length/4+2,a=Math.ceil(i/16),s=new Array(a),u=0;u<a;++u){for(var c=new Uint32Array(16),f=0;f<16;++f)c[f]=t[64*u+4*f]<<24|t[64*u+4*f+1]<<16|t[64*u+4*f+2]<<8|t[64*u+4*f+3];s[u]=c}s[a-1][14]=8*(t.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(t.length-1)&4294967295;for(var l=0;l<a;++l){for(var h=new Uint32Array(80),d=0;d<16;++d)h[d]=s[l][d];for(var p=16;p<80;++p)h[p]=E(h[p-3]^h[p-8]^h[p-14]^h[p-16],1);for(var v=r[0],w=r[1],y=r[2],g=r[3],b=r[4],x=0;x<80;++x){var m=Math.floor(x/20),C=E(v,5)+G(m,w,y,g)+b+e[m]+h[x]>>>0;b=g,g=y,y=E(w,30)>>>0,w=v,v=C}r[0]=r[0]+v>>>0,r[1]=r[1]+w>>>0,r[2]=r[2]+y>>>0,r[3]=r[3]+g>>>0,r[4]=r[4]+b>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]})),D="00000000-0000-0000-0000-000000000000";var M=function(t){if(!s(t))throw TypeError("Invalid UUID");return parseInt(t.substr(14,1),16)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,